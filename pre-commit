#!/c/Python39/python python.exe
# -*- coding:utf-8 -*-
# author: HPCM
# time: 2022/1/11 21:23
# file: checker.py
import re
import os
import sys
import shutil
import subprocess

suffix = ["png", "jpg", "gz", "bz", "zip", "jpeg", "rpm", "jar", "gif", "rar", "pre-commit", "gs.py"]
value_ignores = [
]

# key相等的需要跳过
key_ignores = [
    "author",
]
skip_keys = []
skip_values = []
# key对应的值相等的需要跳过
key_values = [
]

key_rules = [
    r"(([\w0-9-_]*secret[\w0-9-_]*)\s*[=:\(]\s*(['\"]?.*['\"]?))",
    r"(([\w0-9-_]*key[\w0-9-_]*)\s*[=:\(]\s*['\"]?(.*)['\"]?)",
    r"(([\w0-9-_]*ak[\w0-9-_]*)\s*[=:\(]\s*['\"]?(.*)['\"]?)",
    r"(([\w0-9-_]*sk[\w0-9-_]*)\s*[=:\(]\s*['\"]?(.*)['\"]?)",
    r"(([\w0-9-_]*pwd[\w0-9-_]*)\s*[=:\(]\s*['\"]?(.*)['\"]?)",
    r"(([\w0-9-_]*passwd[\w0-9-_]*)\s*[=:\(]\s*['\"]?(.*)['\"]?)",
    r"(([\w0-9-_]*password[\w0-9-_]*)\s*[=:\(]\s*['\"]?(.*)['\"]?)",
    r"(([\w0-9-_]*auth[\w0-9-_]*)\s*[=:\(]\s*['\"]?(.*)['\"]?)",
    r"(([\w0-9-_]*ur[li][\w0-9-_]*)\s*[=:\(]\s*['\"]?(.*)['\"]?)",
    r"(([\w0-9-_]*token[li][\w0-9-_]*)\s*[=:\(]\s*['\"]?(.*)['\"]?)",
    r"(([\w0-9-_]*host[\w0-9-_]*)\s*[=:\(]\s*['\"]?(.*)['\"]?)",
    r"(([\w0-9-_]*database[\w0-9-_]*)\s*[=:\(]\s*['\"]?(.*)['\"]?)",
    r"(([\w0-9-_]*db[\w0-9-_]*)\s*[=:\(]\s*['\"]?(.*)['\"]?)",
    r"(([\w0-9-_]*email[\w0-9-_]*)\s*[=:\(]\s*['\"]?(.*)['\"]?)",
    r"(([\w0-9-_]*user[\w0-9-_]*)\s*[=:\(]\s*['\"]?(.*)['\"]?)",
]

value_rules = [r"[a-zA-Z0-9*]{2,}\.(?:com|cn|net|site|git)"]


result = subprocess.Popen("git config --global core.quotepath false && git diff --cached --name-only --cached",
                          shell=True, stdout=subprocess.PIPE)
for file in result.stdout.read().decode().splitlines():
    subprocess.Popen(f"git add {file}", shell=True, stdout=subprocess.PIPE)
    if not file or any([file.endswith(s) for s in suffix]) or not os.path.exists(file):
        continue
    print(file)
    try:
        with open(file, encoding="utf-8") as f:
            content = f.read()
    except:
        with open(file, encoding="gbk") as f:
            content = f.read()
    for vr in value_rules:
        for res in re.findall(vr, content, flags=re.I):
            print(f"[{file}]checked value: {res}")
            if len(res) > 3 and "***" not in res and res not in value_ignores:
                print(f"{file}: {res}")
                exit("There is value information in this submission. Please process and resubmit!")
    for kr in key_rules:
        for res in re.findall(kr, content, flags=re.I):
            print(f"[{file}]checked key: {res[1]}={res[2]}")
            if len(res[2]) > 3 and not any([key in res[1] for key in skip_keys]) and not any([key in res[2] for key in skip_values]) and "***" not in res[2] and res[1] not in key_ignores and res[2] not in key_values:
                msg = f"There is a risk of privacy data disclosure: {res[0]}\n" + \
                      f"\t{res[1]} = {res[2]}"
                exit(msg)
                
current_file = os.path.abspath(__file__)
gs_filename = os.path.basename(current_file)
git_path = os.path.dirname(os.path.dirname(os.path.dirname(current_file)))
gs_file = os.path.join(git_path, gs_filename)
if os.path.exists(gs_file):
    os.remove(gs_file)
shutil.copy(current_file, gs_file)
sys.path.insert(0, git_path)
subprocess.Popen(f"git add {git_path}", shell=True, stdout=subprocess.PIPE)